// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TO DO: Add indexing

model User {
  id                     String           @id @default(uuid())
  email                  String           @unique
  username               String           @unique
  blitz_rating           Int              @default(800)
  rapid_rating           Int              @default(800)
  password_salt          String
  password_hash          String
  createdAt              DateTime         @default(now())
  friends                User[]           @relation("friends")
  friendsRelation        User[]           @relation("friends")
  gamesAsWhite           Game[]           @relation("GamesAsWhite")
  gamesAsBlack           Game[]           @relation("GamesAsBlack")
  TournamentGamesAsWhite TournamentGame[] @relation("TournamentGamesAsWhite")
  TournamentGamesAsBlack TournamentGame[] @relation("TournamentGamesAsBlack")
}

model FriendRequest {
  senderId   String
  receiverId String

  @@id([senderId, receiverId])
}

model Game {
  id            String     @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  status        GameStatus
  gameType      GameType
  gameDuration  Int
  winnerId      String?
  isDraw        Boolean    @default(false)
  isGameOver    Boolean    @default(false)
  moves         String[] //for now let it be strings
  createdAt     DateTime   @default(now())
  whitePlayer   User       @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User       @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
}

model Tournament {
  id              String           @id @default(uuid())
  name            String           @unique
  participants    String[]
  totalRounds     Int
  roundsOver      Int              @default(0)
  TournamentGames TournamentGame[]
  Rounds          Round[]
}

model TournamentGame {
  id            String     @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  tournamentId  String
  status        GameStatus
  gameType      GameType
  gameDuration  Int
  winnerId      String?
  isDraw        Boolean    @default(false)
  isGameOver    Boolean    @default(false)
  moves         String[] //for now let it be strings
  roundId       String
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  round         Round      @relation(fields: [roundId], references: [id])
  createdAt     DateTime   @default(now())
  whitePlayer   User       @relation("TournamentGamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User       @relation("TournamentGamesAsBlack", fields: [blackPlayerId], references: [id])
}

model Round {
  id           String           @id @default(uuid())
  roundNumber  Int
  tournamentId String
  bye          String?
  startTime    String
  endTime      String
  roundGames   TournamentGame[]
  tournament   Tournament       @relation(fields: [tournamentId], references: [id])
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum GameType {
  RAPID
  BLITZ
}
