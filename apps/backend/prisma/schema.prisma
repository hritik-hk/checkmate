// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TO DO: Add indexing

model User {
  id                     String                  @id @default(uuid())
  email                  String                  @unique
  username               String                  @unique
  blitz_rating           Int                     @default(800)
  rapid_rating           Int                     @default(800)
  password_salt          String
  password_hash          String
  createdAt              DateTime                @default(now())
  friends                User[]                  @relation("friends")
  friendOf               User[]                  @relation("friends")
  gamesAsWhite           Game[]                  @relation("GamesAsWhite")
  gamesAsBlack           Game[]                  @relation("GamesAsBlack")
  TournamentGamesAsWhite TournamentGame[]        @relation("TournamentGamesAsWhite")
  TournamentGamesAsBlack TournamentGame[]        @relation("TournamentGamesAsBlack")
  Tournaments            TournamentParticipant[]
}

model FriendRequest {
  senderUsername   String
  senderId         String
  receiverUsername String
  receiverId       String

  @@id([senderId, receiverId])
}

model Game {
  id            String      @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  result        GameResult?
  status        Status
  gameType      GameType
  gameDuration  Int
  winnerId      String?
  moves         String[] //for now let it be strings
  createdAt     DateTime    @default(now())
  whitePlayer   User        @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User        @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
}

model Tournament {
  id              String                  @id @default(uuid())
  name            String
  // participants    String[]
  status          Status
  gameType        GameType
  createdAt       DateTime                @default(now())
  TournamentGames TournamentGame[]
  Rounds          Round[]
  participants    TournamentParticipant[]
}

model TournamentParticipant {
  userId       String
  tournamentId String
  user         User       @relation(fields: [userId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@id([userId, tournamentId])
}

model TournamentGame {
  id            String      @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  tournamentId  String
  result        GameResult?
  status        Status
  gameType      GameType
  gameDuration  Int
  winnerId      String?
  moves         String[] //for now let it be strings
  roundId       String
  createdAt     DateTime    @default(now())
  tournament    Tournament  @relation(fields: [tournamentId], references: [id])
  round         Round       @relation(fields: [roundId], references: [id])
  whitePlayer   User        @relation("TournamentGamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User        @relation("TournamentGamesAsBlack", fields: [blackPlayerId], references: [id])
}

model Round {
  id           String           @id @default(uuid())
  roundNumber  Int
  tournamentId String
  bye          String?
  startTime    String
  endTime      String
  roundGames   TournamentGame[]
  tournament   Tournament       @relation(fields: [tournamentId], references: [id])
}

enum GameResult {
  ABANDONED
  DRAW
  CHECKMATE
  TIMES_UP
}

enum GameType {
  RAPID
  BLITZ
}

enum Status {
  IN_PROGRESS
  COMPLETED
}
